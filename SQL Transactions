<h1>SQL Transactions</h1>

<h2>What Are Transactions?</h2>
<p style="margin-bottom: 1px;">
    A transaction is a group of SQL statements that are executed together. 
    If one of the statements fails, the whole transaction is rolled back, 
    and the database returns to the state it was in before the transaction started. 
    If all statements succeed, the transaction is committed, and the changes become permanent.
</p>
<p>
    Transactions are essential in situations where having only the first statements succeed 
    could corrupt the database. For example, if money in a bank is being transferred from 
    one account to another, and the transfer fails mid-execution, the database 
    could end up creating fake money or deleting someone's savings. Using a 
    transaction ensures that either the money is properly transferred, or if 
    the transfer fails, nothing is erroneously changed.
</p>

<h2>SQL Server Transaction Syntax</h2>
<p>
    The simplest way to write a transaction is:
</p>
<code>BEGIN TRANSACTION;

    /*<em>SQL statements</em>*/

COMMIT;
</code>
<p>
    You can name a transaction to provide clarity, which 
    is especially useful if you have nested transactions:
</p>
<code>DECLARE @transactionName varchar(20) = 'MyTransaction';
    
BEGIN TRANSACTION @transactionName;

    /*<em>SQL statements</em>*/
    
COMMIT TRANSACTION @transactionName;
</code>
<p>
    Revisiting the bank example, the bank's SQL developers can write a transaction 
    to successfully move the money from one account to another without risk of data corruption:
</p>
<code>/* This code assumes parameters @Amount, @FromAccountNumber, and @ToAccountNumber have been passed in earlier in the program. */

SET XACT_ABORT ON; /* Tells SQL Server to roll back the transaction if any of the statements fail. If XACT_ABORT is set to OFF, the transaction may have to be manually rolled back if an error happens. */

BEGIN TRANSACTION;

    UPDATE Account
    SET Balance = Balance - @Amount
    WHERE AccountNumber = @FromAccountNumber;

    UPDATE Account
    SET Balance = Balance + @Amount
    WHERE AccountNumber = @ToAccountNumber;

COMMIT TRANSACTION;
</code>

<h2>Rolling Back a Transaction</h2>
<p>
    You can manually roll back a transaction if need be by using the ROLLBACK statement:
</p>
<code>BEGIN TRANSACTION;
BEGIN TRY

    /*<em>SQL statements</em>*/
    
    COMMIT TRANSACTION;
END TRY
BEGIN CATCH
    /* If an error occurs before the transaction is committed, the catch block rolls back the changes. */
    IF @@TRANCOUNT > 0
        ROLLBACK;
END CATCH
</code>
<p>
    You can roll back a specific transaction by name, which is especially useful if you have nested transactions
    (by default ROLLBACK rolls back to the outermost transaction):
</p>
<code>DECLARE @outerTransaction varchar(10) = 'outer';
DECLARE @innerTransaction varchar(10) = 'inner';
    
BEGIN TRANSACTION @outerTransaction;

    /*<em>SQL statements</em>*/

    BEGIN TRANSACTION @innerTransaction;
    BEGIN TRY

        /*<em>SQL statements</em>*/

        COMMIT TRANSACTION @innerTransaction;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION @innerTransaction;
    END CATCH    

    /*<em>SQL statements</em>*/

    /* Note that a ROLLBACK; here would roll back the inner transaction along with the outer transaction. */

COMMIT TRANSACTION @outerTransaction;
</code>
<p style="margin-bottom: 4px;">
    Note that once a transaction is committed, it cannot be rolled back unless it is nested inside 
    another transaction. However, you must roll back the outer transaction to roll back the nested one.
</p>
<p>
    Please see the <a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/transactions-transact-sql?view=sql-server-ver15"
    target="blank">Microsoft SQL Server transaction documentation</a> to learn more about SQL transactions, syntax, and database management.
</p>

<!-- TODO: Add information about savepoints here? -->

<p style="margin-top: 2rem; font-size: 1.0625rem;">
    In summary, you've learned how to write SQL transactions, and how to roll back a transaction if it fails. 
    Perhaps you can improve your database by implementing transactions in your code!
</p>

<!-- Tags: SQL -->